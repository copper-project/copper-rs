


Notes for GPIO on the Radxa

.-w------- root root 4.0 KB Thu Jun 13 15:53:27 2024  export
lrwxrwxrwx root root   0 B  Tue May 28 12:52:41 2024  gpiochip0 ⇒ ../../devices/platform/pinctrl/fdd60000.gpio/gpio/gpiochip0
lrwxrwxrwx root root   0 B  Tue May 28 12:52:41 2024  gpiochip128 ⇒ ../../devices/platform/pinctrl/fe770000.gpio/gpio/gpiochip128
lrwxrwxrwx root root   0 B  Tue May 28 12:52:41 2024  gpiochip32 ⇒ ../../devices/platform/pinctrl/fe740000.gpio/gpio/gpiochip32
lrwxrwxrwx root root   0 B  Tue May 28 12:52:41 2024  gpiochip64 ⇒ ../../devices/platform/pinctrl/fe750000.gpio/gpio/gpiochip64
lrwxrwxrwx root root   0 B  Tue May 28 12:52:41 2024  gpiochip96 ⇒ ../../devices/platform/pinctrl/fe760000.gpio/gpio/gpiochip96
.-w------- root root 4.0 KB Thu Jun 13 15:53:27 2024  unexport


// Gloubi boulga from ChatGPT

use std::fs::OpenOptions;
use std::io::{Result, Write};
use std::os::unix::io::AsRawFd;
use memmap2::{MmapMut, MmapOptions};

const GPIO_BASE_ADDRESSES: [(usize, usize); 6] = [
    (0xfdd60000, 128),  // gpiochip0
    (0xfe770000, 128),  // gpiochip128
    (0xfe740000, 128),  // gpiochip32
    (0xfe750000, 128),  // gpiochip64
    (0xfe760000, 128),  // gpiochip96
];

struct GpioController {
    mmap: MmapMut,
    base_address: usize,
}

impl GpioController {
    fn new(base_address: usize) -> Result<Self> {
        let file = OpenOptions::new()
            .read(true)
            .write(true)
            .open("/dev/mem")?;

        let mmap = unsafe {
            MmapOptions::new()
                .offset(base_address as u64)
                .len(0x1000) // Assuming 4KB per GPIO bank, adjust if necessary
                .map_mut(&file)?
        };

        Ok(Self { mmap, base_address })
    }

    fn calculate_register_and_mask(&self, gpio_index: usize) -> (usize, u32) {
        let offset = gpio_index % 32;
        let register_offset = (gpio_index / 32) * 4;
        let bit_mask = 1 << offset;

        (register_offset, bit_mask)
    }

    fn set_pin(&mut self, gpio_index: usize) -> Result<()> {
        let (register_offset, bit_mask) = self.calculate_register_and_mask(gpio_index);

        let set_reg = &mut self.mmap[register_offset..register_offset + 4];
        let value = u32::from_le_bytes(set_reg.try_into().unwrap()) | bit_mask;
        set_reg.copy_from_slice(&value.to_le_bytes());

        Ok(())
    }

    fn clear_pin(&mut self, gpio_index: usize) -> Result<()> {
        let (register_offset, bit_mask) = self.calculate_register_and_mask(gpio_index);

        let clr_reg = &mut self.mmap[register_offset..register_offset + 4];
        let value = u32::from_le_bytes(clr_reg.try_into().unwrap()) & !bit_mask;
        clr_reg.copy_from_slice(&value.to_le_bytes());

        Ok(())
    }
}

fn main() -> Result<()> {
    let mut gpio_controller0 = GpioController::new(GPIO_BASE_ADDRESSES[0].0)?;

    // Example: Set GPIO index 10 from gpiochip0
    gpio_controller0.set_pin(10)?;

    // Example: Clear GPIO index 10 from gpiochip0
    gpio_controller0.clear_pin(10)?;

    Ok(())
}
