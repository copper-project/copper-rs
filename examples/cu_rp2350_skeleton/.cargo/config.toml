[env]
DEFMT_LOG = "debug"

# Some convienience aliases.
[alias]
build-arm = "build --target=thumbv8m.main-none-eabihf"
build-riscv = "build --target=riscv32imac-unknown-none-elf"
run-arm = "run --target=thumbv8m.main-none-eabihf"
run-riscv = "run --target=riscv32imac-unknown-none-elf"

[build]
target = "thumbv8m.main-none-eabihf"  # This is for the Cortex-M33 in the RP2350

[target.thumbv8m.main-none-eabihf]
rustflags = [
    "-C", "link-arg=--nmagic", # Turns off page alignment of sections (which saves flash space)
    "-C", "link-arg=-Tlink.x", # Tells the linker to use link.x as a linker script. This is usually provided by the cortex-m-rt crate, and by default the version in that crate will include a file called `memory.x` which describes the particular memory layout for your specific chip. 
    "-C", "link-arg=-Tdefmt.x", # Tells the linker to use `defmt.x` as a secondary linker script. This is required to make defmt_rtt work.
    "-C", "target-cpu=cortex-m33",
]

# With no probe you can use the bootsel mode over the USB port
# runner = "picotool load -u -v -x -t elf"

# With a cmsis-dap probe you can use probe-rs
runner = "probe-rs run --chip RP235x --protocol swd"

# The RiskV cores in the rp2350 do not have hardware floating point.
[target.riscv32imac-unknown-none-elf]
rustflags = [
    "-C", "link-arg=--nmagic",
    "-C", "link-arg=-Trp235x_riscv.x", # Specific RiskV linker script
    "-C", "link-arg=-Tdefmt.x",
]

# With no probe you can use the bootsel mode over the USB port
# runner = "picotool load -u -v -x -t elf"

# With a cmsis-dap probe you can use probe-rs
runner = "probe-rs run --chip RP235x --protocol swd"

