(
    tasks: [
        (
            id: "source",
            type: "tasks::ExampleSrc",
        ),
        (
            id: "publisher",
            type: "cu_zenoh_ros::ExamplePublisher",
            config: {
                "domain_id": 0,
                "namespace": "copper",
                "node": "sink_node",
                "topic": "/output",
                "zenoh_config_json": r#"
{
  mode: "peer",
  connect: {
    timeout_ms: { router: -1, peer: -1, client: 0 },
    endpoints: [
      "tcp/localhost:7447"
    ],
    exit_on_failure: { router: false, peer: false, client: true },
    retry: {
      period_init_ms: 1000,
      period_max_ms: 4000,
      period_increase_factor: 2,
    },
  },

  listen: {
    timeout_ms: 0,
    endpoints: [
      "tcp/localhost:0"
    ],
    exit_on_failure: true,
    retry: {
      period_init_ms: 1000,
      period_max_ms: 4000,
      period_increase_factor: 2,
    },
  },
  open: {
    return_conditions: {
      connect_scouted: true,
      declares: true,
    },
  },
  scouting: {
    timeout: 3000,
    delay: 500,
    multicast: {
      enabled: false,
      address: "224.0.0.224:7446",
      ttl: 1,
      autoconnect: { router: [], peer: ["router", "peer"], client: ["router"] },
      listen: true,
    },
    gossip: {
      enabled: true,
      multihop: false,
      target: { router: ["router", "peer"], peer: ["router"]},
      autoconnect: { router: [], peer: ["router", "peer"] },
    },
  },
  timestamping: {
    enabled: { router: true, peer: true, client: true },
    drop_future_timestamp: false,
  },
  queries_default_timeout: 10000,
  routing: {
    router: {
      peers_failover_brokering: true,
    },
    peer: {
      mode: "peer_to_peer",
    },
    interests: {
      /// The timeout to wait for incoming interests declarations in milliseconds.
      /// The expiration of this timeout implies that the discovery protocol might be incomplete,
      /// leading to potential loss of messages, queries or liveliness tokens.
      timeout: 10000,
    },
  },
  transport: {
    unicast: {
      open_timeout: 10000,
      accept_timeout: 10000,
      accept_pending: 100,
      max_sessions: 1000,
      max_links: 1,
      lowlatency: false,
      qos: {
        enabled: true,
      },
      compression: {
        enabled: false,
      },
    },
    multicast: {
      join_interval: 2500,
      max_sessions: 1000,
      qos: {
        enabled: false,
      },
      compression: {
        enabled: false,
      },
    },
    link: {
      tx: {
        sequence_number_resolution: "32bit",
        lease: 10000,
        keep_alive: 4,
        batch_size: 65535,
        queue: {
          size: {
            control: 2,
            real_time: 2,
            interactive_high: 2,
            interactive_low: 2,
            data_high: 2,
            data: 2,
            data_low: 2,
            background: 2,
          },
          congestion_control: {
            drop: {
              wait_before_drop: 1000,
              max_wait_before_drop_fragments: 50000,
            },
            block: {
              wait_before_close: 5000000,
            },
          },
          batching: {
            enabled: true,
            time_limit: 1,
          },
          allocation: {
            mode: "lazy",
          },
        },
      },
      rx: {
        buffer_size: 65535,
        max_message_size: 1073741824,
      },
      tls: {
        root_ca_certificate: null,
        listen_private_key: null,
        listen_certificate: null,
        enable_mtls: false,
        connect_private_key: null,
        connect_certificate: null,
        verify_name_on_connect: true,
        close_link_on_expiration: false,
      },
    },
    shared_memory: {
      enabled: false,
    },
    auth: {
      usrpwd: {
        user: null,
        password: null,
        dictionary_file: null,
      },
      pubkey: {
        public_key_pem: null,
        private_key_pem: null,
        public_key_file: null,
        private_key_file: null,
        key_size: null,
        known_keys_file: null,
      },
    },
  },
  adminspace: {
    enabled: true,
    permissions: {
      read: true,
      write: false,
    },
  },
}"#,
            }
        ),
    ],
    cnx: [
        (src: "source", dst: "publisher", msg: "i8"),
    ]
) 
