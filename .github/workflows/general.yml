name: "CI/CD"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - name: Cargo fmt check
        run: cargo fmt --all -- --check
      
      # Install dependencies only on Linux
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libudev-dev libpcap-dev

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Set Python version for pyo3
        run: echo "PYO3_PYTHON=$(which python3)" >> $GITHUB_ENV

      - name: Add Python to Library Paths
        run: |
          echo "LIBRARY_PATH=$(python3-config --prefix)/lib:$LIBRARY_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$(python3-config --prefix)/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$(python3-config --prefix)/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Build
        run: cargo build
      - name: Run tests
        run: cargo test

      # Integration Test for the 1 liner generation of a project.
      - name: Install cargo-generate
        run: cargo install cargo-generate
      - name: Generate new project in temporary directory
        run: |
          cd templates
          cargo generate -p cu_full --name test_project --destination $RUNNER_TEMP --silent
      - name: Compile generated project
        run: |
          cd $RUNNER_TEMP/test_project
          cargo build --release

