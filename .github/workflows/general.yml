name: "CI/CD"

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  CARGO_TERM_COLOR: always

jobs:
  Unit-Tests:
    name: Unit Tests

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        mode: [debug, release]

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Setup rust-cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.mode }}
      - name: Install latest nextest
        uses: taiki-e/install-action@nextest
      - name: Install winget
        if: runner.os == 'Windows'
        uses: Cyberboss/install-winget@v1

      - name: Check formatting
        run: cargo +stable fmt --all -- --check

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libudev-dev libpcap-dev

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          Invoke-WebRequest -Uri https://npcap.com/dist/npcap-sdk-1.13.zip -OutFile npcap-sdk.zip
          Expand-Archive -Path npcap-sdk.zip -DestinationPath $env:USERPROFILE\npcap-sdk
          Remove-Item npcap-sdk.zip
          winget install DaiyuuNobori.Win10Pcap --accept-source-agreements --accept-package-agreements
          Add-Content -Path $env:GITHUB_ENV -Value "LIB=$env:USERPROFILE\npcap-sdk\Lib\x64"

      - name: Set build mode (Linux / MacOS)
        if: runner.os != 'Windows'
        run: echo "RELEASE_FLAG=$([[ '${{ matrix.mode }}' == 'release' ]] && echo '--release' || echo '')" >> $GITHUB_ENV

      - name: Set build mode (Windows)
        if: runner.os == 'Windows' && matrix.mode == 'release'
        run: |
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_FLAG=--release"

      # Run Clippy and build
      - name: Run clippy on (${{ matrix.os }} | ${{matrix.mode}})
        run: cargo +stable clippy $RELEASE_FLAG --workspace --all-targets -- --deny warnings
      - name: Run clippy with all features on (${{ matrix.os }} | ${{matrix.mode}})
        run: cargo +stable clippy $RELEASE_FLAG --workspace --all-targets --all-features -- --deny warnings
      - name: Run build with all features on (${{ matrix.os }} | ${{matrix.mode}})
        run: cargo +stable build $RELEASE_FLAG --workspace --all-targets --all-features

      - name: Run doctests on (${{ matrix.os }} | debug)
        if: matrix.mode == 'debug'
        run: cargo +stable test --doc --workspace

      # Run Unit Tests
      - name: Run Unit Tests on (${{ matrix.os }} | ${{matrix.mode}})
        run: cargo +stable nextest run $RELEASE_FLAG --all-targets --workspace
      - name: Run Unit Tests with all features on (${{ matrix.os }} | ${{matrix.mode}})
        run: cargo +stable nextest run $RELEASE_FLAG --all-targets --workspace --all-features

      # Run Project Generation Tests
      - name: Install cargo-generate on (${{ matrix.os }} | debug)
        if: matrix.mode == 'debug'
        run: cargo +stable install cargo-generate

      - name: Generate new project on (${{ matrix.os }} | debug)
        if: matrix.mode == 'debug'
        run: |
          cd templates
          cargo +stable generate -p cu_full --name test_project --destination . -d copper_source=local --silent

      - name: Build generated project on (${{ matrix.os }} | debug)
        if: matrix.mode == 'debug'
        run: |
          cd templates/test_project
          cargo +stable build
  typos:
    name: Typos Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: crate-ci/typos@master
        with:
          config: ./.config/_typos.toml
