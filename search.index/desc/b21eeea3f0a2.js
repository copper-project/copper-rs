rd_("AjContains the success value000CaA unique and descriptive identifier for the pool.0AgUnique node identifier.1CkThis represents a connection between 2 tasks (nodes) in \xe2\x80\xa60000AhContains the error value000CgCallbacked when a task is created. It gives you the \xe2\x80\xa6000ChBuild a fixed sized SoA (Structure of Arrays) from a \xe2\x80\xa6CjThe time of validity of a message can be more than one \xe2\x80\xa60CjReturns a reference to the value corresponding to the key.CdReturns the current number of elements in the queue.BjReturns the number of elements in the map.1CmFunction called from generated code to log data. It moves \xe2\x80\xa60BkMessage type exchanged between src and dst.0000AjCreates a new application.BmCreates a new simulation-enabled application.CnHere you need to initialize everything your task will need \xe2\x80\xa600Bomsg_index is the interned index of the message.ClCreates a RobotClock using now as its reference time. It \xe2\x80\xa62224322201BfCreates an empty <code>HashMap</code>.54333CnNow returns the time that passed since the reference time, \xe2\x80\xa6CmA convenient way to get the current time from the mocking \xe2\x80\xa610C`Runs indefinitely looping over run_one_iterationCgRuns indefinitely looping over run_one_iteration in \xe2\x80\xa61010oSource node id.ClThe time of validity of the message. It can be undefined \xe2\x80\xa60000000BeCheck the log and dump info about it.BjGeneral information about system operation0CjA node in the configuration graph. A node represents a \xe2\x80\xa60000CgThe type representing a simulation step that can be \xe2\x80\xa600BbCallbacked when a task is stopped.000Chcopper GitHub last commit  dependency status License \xe2\x80\xa6AoReturns the argument unchanged.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000DlConverts a <code>[(K, V); N]</code> into a <code>HashMap&lt;K, V&gt;</code>.111111111111111111111111111111111111111111111111111111111111Cmdestination is the binary stream in which we will log the \xe2\x80\xa60BaCalls <code>U::from(self)</code>.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C`Returns an iterator over the queue\xe2\x80\x99s contents.CiAn iterator visiting all key-value pairs in arbitrary \xe2\x80\xa61CiAn iterator visiting all keys in arbitrary order. The \xe2\x80\xa6ClRender the configuration file to a dot file then convert \xe2\x80\xa6CfBuild a fake clock with a reference time of 0. The \xe2\x80\xa60AcNode: node instance000BiOpen the SVG in the default system viewerBgPeeks at the last element in the queue.0CiCalled to stop the task. It signals that the *process \xe2\x80\xa600000000BcCallbacked when copper is stopping.001110CkThis method is called by the framework when it wants to \xe2\x80\xa6000CiThis is the robotics message type for Copper with the \xe2\x80\xa6000BnDetailed information useful during development0CjIssues that might disrupt normal operation but don\xe2\x80\x99t \xe2\x80\xa60BbCallbacked when a task is started.000CeWrapper around the ron::Value to allow for custom \xe2\x80\xa6000AaClears the queue.CkClears the map, removing all key-value pairs. Keeps the \xe2\x80\xa61ChThe base clock the runtime will be using to record time.000CnThis macro is used to log a debug message with parameters. \xe2\x80\xa60CgClears the map, returning all key-value pairs as an \xe2\x80\xa6CmGets the given key\xe2\x80\x99s corresponding entry in the map for \xe2\x80\xa6CiReturns a reference to the value corresponding to the \xe2\x80\xa6ClStart is called between the creation of the task and the \xe2\x80\xa600000000000CaThe tuple of all the tasks in order of execution.000CmTask rust struct underlying type, e.g. \xe2\x80\x9cmymodule::Sensor\xe2\x80\xa6AoGets the current value of time.0ClA CuPool is a pool of buffers that can be shared between \xe2\x80\xa600CgThis is the most generic Task of copper. It is a \xe2\x80\x9c\xe2\x80\xa6000CkA robot time is just a duration from a fixed point in time.0CdNodeId is the unique identifier of a node in the \xe2\x80\xa60000CgThis module defines the configuration of the copper \xe2\x80\xa600A`Config file nameAjConfig passed to the task.2CnThis module contains all the main definition of the traits \xe2\x80\xa600CkThis method is called by the framework when it wants to \xe2\x80\xa6000CgGraph structure - either a single graph or multiple \xe2\x80\xa60000ClReturns a reference to the map\xe2\x80\x99s <code>BuildHasher</code>.BfInserts a key-value pair into the map.AmInterns a string For example:0CdLogger for the copper lists (messages between tasks)000AoA less precise but quicker time0AoAdds a value to the statistics.0CnRemoves a key from the map, returning the value at the key \xe2\x80\xa6CaRender the configuration graph in the dot format.00CeRetains only the elements specified by the predicate.CaReturns the current status of the unified logger.0CkAn iterator visiting all values in arbitrary order. The \xe2\x80\xa6BoCopper friendly wrapper for a fixed size array.000AiCommon copper Error type.000CmEmulated the behavior of an erroring task (same as return \xe2\x80\xa6000CjA hash map implemented with quadratic probing and SIMD \xe2\x80\xa6CnHigh-precision instant in time, represented as nanoseconds \xe2\x80\xa60CnCallbacked when a task is getting called on process. I and \xe2\x80\xa6000CnIndication of potential issues that don\xe2\x80\x99t prevent normal \xe2\x80\xa60AoAcquire a buffer from the pool.00CmAdds an edge between two nodes/tasks in the configuration \xe2\x80\xa600EmCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value \xe2\x80\xa6CkReturns true if this log level is enabled for the given \xe2\x80\xa60CmReturns a mutable reference to the value corresponding to \xe2\x80\xa6BoReturns <code>true</code> if the queue is full.0AnOptional logging configuration00AjConfig passed to the task.11AgThe runtime monitoring.BaOptional monitoring configuration0101001BfNodeId: node id of the task to execute000CkProcess is the most critical execution of the task. The \xe2\x80\xa600000000000DkReserves capacity for at least <code>additional</code> more elements to \xe2\x80\xa6CjThis is a generator for a main function to build a log \xe2\x80\xa6AnOptional runtime configuration0000CjCritical errors requiring immediate attention, usually \xe2\x80\xa60CfCuConfig is the programmatic representation of the \xe2\x80\xa60000CmA shareable handle to an Array coming from a pool (either \xe2\x80\xa600CeMonitor decision to be taken when a task errored out.000CiA KeyFrame is recording a snapshot of the tasks state \xe2\x80\xa6000CgRepresent the minimum set of traits to be usable as \xe2\x80\xa6000CjReturns an ascending iterator over the queue\xe2\x80\x99s contents.0CkReturns the number of elements the map can hold without \xe2\x80\xa6CnGet the node with the given id. If mission_id is provided, \xe2\x80\xa600ClReturns <code>true</code> if the queue contains no elements.CjReturns <code>true</code> if the map contains no elements.1CgReturns a mutable iterator over the queue\xe2\x80\x99s contents.CiAn iterator visiting all key-value pairs in arbitrary \xe2\x80\xa61CiThis metadata is the data that is common to all messages.0000000CcRestrict this connection for this list of missions.00BdMissions for which this task is run.11ChValidate the logging configuration to ensure section \xe2\x80\xa600BeTrait to implement a monitoring task.000CiThis is the main structure that will be injected as a \xe2\x80\xa6000CiA Src Task is a task that only produces messages. For \xe2\x80\xa6000ClThe internal state of a task needs to be serializable so \xe2\x80\xa6000CkA do nothing monitor if no monitor is provided. This is \xe2\x80\xa6000DjA <strong>data structure</strong> that can be serialized into any data \xe2\x80\xa6ClAdd a parameter to the log entry. paramname_index is the \xe2\x80\xa60CfCopy data from a handle to a new handle from the pool.00CkCuRuntime is the heart of what copper is running on the \xe2\x80\xa600ClDecrements the time by the given amount. Be careful this \xe2\x80\xa60DoConstructs a <code>HashMap&lt;K, V&gt;</code> from an iterator of key-value \xe2\x80\xa6CnCreates a consuming iterator, that is, one that moves each \xe2\x80\xa6CiCreates a consuming iterator visiting all the keys in \xe2\x80\xa6CeSerialize this value into the given Serde serializer.CnThis is a custom serialization to make this implementation \xe2\x80\xa600BdSets the absolute value of the time.0CjShrinks the capacity of the map with a lower limit. It \xe2\x80\xa6AlCuTaskType: type of the task000CjA Copper-friendly wrapper around ArrayVec with bincode \xe2\x80\xa6000CnFor Robot times, the underlying type is a u64 representing \xe2\x80\xa60CfThis is the basic structure for a log entry in Copper.0AfLog levels for Copper.0CjA Sink Task is a task that only consumes messages. For \xe2\x80\xa6000AoCopper tasks can be of 3 types:000BgThe main file header of the datalogger.0ChCallbacked when a task is getting called on pre-process.000CnA running Robot clock. The clock is a monotonic clock that \xe2\x80\xa60CnRun this task in the background: ie. Will be set to run on \xe2\x80\xa6CkCopperList is the main data structure used by Copper to \xe2\x80\xa600ClCreates an iterator which uses a closure to determine if \xe2\x80\xa6ChGenerates the CopperList content type from a config. \xe2\x80\xa60CiSome basic internal monitoring tooling Copper uses to \xe2\x80\xa600CnThis is a method called by the runtime before \xe2\x80\x9cprocess\xe2\x80\x9d\xe2\x80\xa600000000000CiOption to include/exclude stubbing for simulation. By \xe2\x80\xa6Bd<code>cu29::simulation</code> Module00BhNumber of buffer slots left in the pool.00CnSmall status text for user UI to get the realtime state of \xe2\x80\xa60CkA small string for real time feedback purposes. This is \xe2\x80\xa600101AgFor backgrounded tasks.000BlTotal size of the pool in number of buffers.00CnTries to insert a key-value pair into the map, and returns \xe2\x80\xa6CkAn iterator visiting all values mutably in arbitrary order.ChSafely access the inner value, applying a closure to it.0AdThe state of a task.000AhRepresents a time range.0CdBasic Type that can be used in a buffer in a CuPool.00BfConfiguration for logging in the node.0000CfTrait for a Pool to exposed to be monitored by the \xe2\x80\xa600CiCallbacked when a task is getting called on post-process.000ClThis is the answer the simulator can give to control the \xe2\x80\xa6000CnDefines a basic write, append only stream trait to be able \xe2\x80\xa6000CnA section is a contiguous chunk of memory that can be used \xe2\x80\xa6BnThe returned slice is section_size or greater.10AbSize of one buffer00CdCommon copper traits and types for robotics systems.CnThis is a custom serialization to make this implementation \xe2\x80\xa600BfEncode text used as regular HTML text.CgFixes up a zero-initialized copper list so that all \xe2\x80\xa6000CkCreates a consuming iterator visiting all the values in \xe2\x80\xa6CmThis is a method called by the runtime after \xe2\x80\x9cprocess\xe2\x80\x9d\xe2\x80\xa600000000000DgTries to reserve capacity for at least <code>additional</code> more \xe2\x80\xa6DgCreates an empty <code>HashMap</code> which will use the given hash \xe2\x80\xa6AdThe state of a task.000ChThis is a placeholder task for a source task for the \xe2\x80\xa6000CnA device memory pool can copy data from a device to a host \xe2\x80\xa600CjThis is a generator for a main function to build a log \xe2\x80\xa6E`Homebrewed <code>Option&lt;CuDuration&gt;</code> to avoid using 128bits just \xe2\x80\xa60CkReturns a mutable ascending iterator over the queue\xe2\x80\x99s \xe2\x80\xa60DkReturns <code>true</code> if the map contains a value for the specified \xe2\x80\xa6Chcopper GitHub last commit  dependency status License \xe2\x80\xa6CmCreate a new CuHandle not part of a Pool (not for onboard \xe2\x80\xa60DgCreates a new <code>LiveStatistics</code> instance with a specified \xe2\x80\xa60CfThe time range used for the processing of this message0000000ClRemoves a key from the map, returning the stored key and \xe2\x80\xa6CbCreate a new stream to write to the unifiedlogger.0CjFull dump of the copper structured log from its binary \xe2\x80\xa6ChA buffer that is aligned to a specific size with the \xe2\x80\xa600BjA trait to provide a clock to the runtime.0CkJust a simple struct to hold the various bits needed to \xe2\x80\xa6000CfA simple allocator that counts the number of bytes \xe2\x80\xa6000ChA trait that defines the structure and behavior of a \xe2\x80\xa600ChA Handle to a Buffer. For onboard usages, the buffer \xe2\x80\xa600CnCuMsgMetadata is a structure that contains metadata common \xe2\x80\xa6000CfThis is a placeholder task for a sink task for the \xe2\x80\xa6000CiCuMsg is the envelope holding the msg payload and the \xe2\x80\xa6000CnThe callback took care of the logic on the simulation side \xe2\x80\xa6000CjThe lifetime of this struct is the lifetime of the logger.0CmTrait to trace back from the CopperList the origin of the \xe2\x80\xa6000CkA SectionHandle is a handle to a section in the datalogger.0CjEach concurrent sublogger is tracked through a section \xe2\x80\xa60BoHolds the read or write side of the datalogger.0CbFlush the given section to the underlying storage.0ClBuilds a monotonic clock starting at the given reference \xe2\x80\xa60CnGet the list of edges that are connected to the given node \xe2\x80\xa600ClReturns the key-value pair corresponding to the supplied \xe2\x80\xa6ClBy default, assume a source or a sink is not run in sim. \xe2\x80\xa600ClCallbacked when a Task errored out. The runtime requires \xe2\x80\xa6000CkShrinks the capacity of the map as much as possible. It \xe2\x80\xa6CmSize of each slab in the log file. (it is the size of the \xe2\x80\xa60000DeCreates an empty <code>HashMap</code> with at least the specified \xe2\x80\xa6CnBincode Adapter for Freezable tasks This allows the use of \xe2\x80\xa6000CnNot implemented yet. This mask will be used to for example \xe2\x80\xa6000ChThis structure maintains the entire memory needed by \xe2\x80\xa6000lExtract logsCgIncludes are used to include other configuration files.0000CnAccumulative stat object that can give your some real time \xe2\x80\xa6000CmMissions are used to generate alternative DAGs within the \xe2\x80\xa60000C`A mock clock that can be controlled by the user.0BaRead back a unified log linearly.0CjDefines the types of what can be logged in the unified \xe2\x80\xa6000CiAdds #[copper_runtime(config = \xe2\x80\x9cpath\xe2\x80\x9d, sim_mode = \xe2\x80\xa60ClIf \xe2\x80\x9csomething/toto.copper\xe2\x80\x9d is given, it will find or \xe2\x80\xa60CcText log line formatter. Only available on std. \xe2\x80\xa60CkThis version of log is only compiled in debug mode This \xe2\x80\xa60ClSet a CopperList execution rate target in Hz It will act \xe2\x80\xa60000CbReads the entire contents of a file into a string.CmThe runtime configuration controlling the behavior of the \xe2\x80\xa6000CcStops all tasks managed by the application/runtime.CiStops all tasks managed by the application/runtime in \xe2\x80\xa61010CiMutably access the inner value, applying a closure to it.0CiThis is the configuration of a component (like a task \xe2\x80\xa60000CiThose are the possible states along the lifetime of a \xe2\x80\xa6000CjA CopperListTuple needs to be encodable, decodable and \xe2\x80\xa6000CnThis structure represents a loop in the execution plan. It \xe2\x80\xa6000CgThis structure represents a step in the execution plan.0000000CnThe writing interface to the unified logger. Writing is \xe2\x80\x9c\xe2\x80\xa60ChRebuild a log line from the interned strings and the \xe2\x80\xa60CdStarts all tasks managed by the application/runtime.CjStarts all tasks managed by the application/runtime in \xe2\x80\xa61010CkThe base path is the name with no _0 _1 et the end. for \xe2\x80\xa6AnA pool of host memory buffers.00CmInitializes fields that cannot be zeroed after allocating \xe2\x80\xa6000ChA trait that defines the structure and behavior of a \xe2\x80\xa600BoThe actual implementation needs to be executed.000BkManages the frozen tasks state and logging.000ClThis allows this crate to be used outside of Copper (ie. \xe2\x80\xa60CfBasic statistics for the unified logger. Note: the \xe2\x80\xa60DjAttempts to get mutable references to <code>N</code> values in the map \xe2\x80\xa6BdExtracts the keyframes from the log.CfGet the list of pools and their statistics. We use \xe2\x80\xa600BhReturns a merged CuConfigRepresentation.CkRead through the next section entry regardless of its type.BnReads the section from the section header pos.10BmRestore all tasks from the given frozen state00000CdPre-allocated size for each section in the log file.0000CcA read side of the memory map based unified logger.0CjTakes a handle to a device buffer and copies it into a \xe2\x80\xa600CnInterval in copperlists between two \xe2\x80\x9ckeyframes\xe2\x80\x9d in the \xe2\x80\xa60000CdThe logger for the state of the tasks (frozen tasks)000CkExecutes a single iteration of copper-generated runtime \xe2\x80\xa6CnExecutes a single iteration of copper-generated runtime in \xe2\x80\xa61010CfManages the lifecycle of the copper lists and logging.000CgKey metadata piece attached to every message in Copper.000AcExtract copperlistsClRepresents a time range with possible undefined start or \xe2\x80\xa60AoA write side of the datalogger.0CmThis is a basic setup for a copper application to get you \xe2\x80\xa6CmExtracts the copper lists from a binary representation. P \xe2\x80\xa6CeCallback that will be trigger at the end of every \xe2\x80\xa6000BhRead a copper configuration from a file.00000CkThis is the state that will be passed to the simulation \xe2\x80\xa6000ClA generic trait to expose the generated CuStampedDataSet \xe2\x80\xa6000ChThe logger for the copper lists (messages between tasks)000BdEnable task logging to the log file.0000CmReturns the original configuration as a string, typically \xe2\x80\xa600000CjRead a copper configuration from a String. Parse a RON \xe2\x80\xa6CkA Specialized statistics object for CuDuration. It will \xe2\x80\xa6000BlUse this builder to create a new DataLogger.0ClThis is the main heuristics to compute an execution plan \xe2\x80\xa6000CnThis a convenience wrapper around the UnifiedLoggerRead to \xe2\x80\xa60ClConvenience function to returns the default path for the \xe2\x80\xa60Cnthe index in the copper list of the output message and its \xe2\x80\xa6000CnReads all interned strings from the index at the specified \xe2\x80\xa60CeThis is the main Copper configuration representation.CnTrait to get a vector of type-erased CuStampedDataSet This \xe2\x80\xa6000CnGet the list of edges that are connected to the given node \xe2\x80\xa6ChRead through the unified logger until it reaches the \xe2\x80\xa60CkReturns a consistent hashmap of mission names to Graphs \xe2\x80\xa600Clthe indices in the copper list of the input messages and \xe2\x80\xa6000ChValidate the logging configuration to ensure section \xe2\x80\xa600DeCreates an empty <code>HashMap</code> with at least the specified \xe2\x80\xa6DjAttempts to get mutable references to <code>N</code> values in the map \xe2\x80\xa6ClConvert a CuConfigRepresentation to a CuConfig. Uses the \xe2\x80\xa6BmShared implementation for deserializing a \xe2\x80\xa6")